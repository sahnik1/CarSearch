
package Backend;

import static Backend.Interface.dtm;
import static Backend.parseCar.getModelBst;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
* <h1>Interface Class</h1>
* Interface Implements the Graphical
* User Interface for Easy Access.
* <p>
*
* @author  Anant Jain
* @author Karanjot Sahni
* @version 1.0
* @since   2019-02-16 
*/
public class Interface extends javax.swing.JFrame {
        public static DefaultTableModel dtm;
        public static Vector<Car> currcarlist;
        public static int id;
        public static int rec;
        public static int vaff;

    /**
     * Initializes the Components in the Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jB3 = new javax.swing.JButton();
        jLb1 = new javax.swing.JLabel();
        tf1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb1 = new javax.swing.JTable();
        jB2 = new javax.swing.JButton();
        jCb1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jB3.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jB3.setText("Search/Show All");
        jB3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB3ActionPerformed(evt);
            }
        });

        jLb1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLb1.setText("Enter Vehicle Name:");

        tf1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf1ActionPerformed(evt);
            }
        });

        tb1.setAutoCreateRowSorter(true);
        tb1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Make", "Model", "Year", "City MPG", "Highway MPG", "Combined MPG", "Cylinders", "Engine Displacement(Litres)", "Transmission", "Drive", "Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb1.getTableHeader().setReorderingAllowed(false);
        tb1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb1);
        if (tb1.getColumnModel().getColumnCount() > 0) {
            tb1.getColumnModel().getColumn(10).setMinWidth(0);
            tb1.getColumnModel().getColumn(10).setPreferredWidth(0);
            tb1.getColumnModel().getColumn(10).setMaxWidth(0);
        }

        jB2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jB2.setText("EXIT");
        jB2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB2ActionPerformed(evt);
            }
        });

        jCb1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selection for Sort", "Make", "Model", "Year", "City MPG", "Highway MPG", "Combined MPG", "Recalls" }));
        jCb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCb1ActionPerformed(evt);
            }
        });

        jButton1.setText("SORT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("CLEAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLb1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jCb1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf1, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jB3, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(1, 1, 1)))
                .addContainerGap(92, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(539, 539, 539)
                .addComponent(jB2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tf1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLb1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCb1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jB2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB3ActionPerformed
        showAll();
        dtm = (DefaultTableModel)tb1.getModel();
        String userin = tf1.getText().toUpperCase();
        if (userin != null && !userin.isEmpty()){
        BST<String, Vector<Car>> carbst = getModelBst();
        if(carbst.get(userin) != null){
            dtm.getDataVector().removeAllElements();
            dtm.fireTableDataChanged();
            currcarlist = new Vector<Car>();
            Vector<Car> cars = carbst.get(userin);
            for(int i = 0; i < cars.size(); i++){
                dtm.addRow( new Object[]{ cars.get(i).getMake().toUpperCase(), cars.get(i).getModel().toUpperCase(), cars.get(i).getYear(), cars.get(i).getCitympg(), cars.get(i).getHighmpg(), cars.get(i).getCombmpg(), cars.get(i).getCyl(), cars.get(i).getEngDis(), cars.get(i).getTrans(), cars.get(i).getDrive(),cars.get(i).getID() } );
                currcarlist.add(cars.get(i));
            }
        }
        else{
            JOptionPane.showMessageDialog(this,"No values found.Please check the vehicle's name.");
        }}
    }//GEN-LAST:event_jB3ActionPerformed

    private void tb1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb1MouseClicked
        JTable source = (JTable)evt.getSource();
            int row = source.rowAtPoint( evt.getPoint() );
//            int column = source.columnAtPoint( evt.getPoint() );
//            String s=source.getModel().getValueAt(row, column)+"";
    int Year = Integer.parseInt(tb1.getModel().getValueAt(row, 2).toString());
    String Mk = tb1.getModel().getValueAt(row, 0).toString();
    String Mdl = tb1.getModel().getValueAt(row, 1).toString();
    id=Integer.parseInt(tb1.getModel().getValueAt(row, 10).toString());
        BST<Integer, Car> carbst = parseCar.getIDBst();
            Car currcar = carbst.get(id);
            rec = currcar.getRecall();
            vaff = currcar.getVehicleAff();
            
    getWeb(Year,Mk,Mdl);// TODO add your handling code here:
    }//GEN-LAST:event_tb1MouseClicked

    private void jB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB2ActionPerformed
  System.exit(0);         // TODO add your handling code here:
    }//GEN-LAST:event_jB2ActionPerformed

    private void tf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf1ActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_tf1ActionPerformed

    private void jCb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCb1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCb1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    int Opt=(jCb1.getSelectedIndex());
        dtm = (DefaultTableModel)tb1.getModel();
        if(dtm.getRowCount() == 0){
            JOptionPane.showMessageDialog(this,"No Data to Sort");
        }
        else if(Opt==0){
        JOptionPane.showMessageDialog(this,"Please select a metric to sort");
        }
        else if(Opt==1){
            Car[] cars = currcarlist.toArray(new Car[currcarlist.size()]);
            MergeSort.makesort(cars);
            sortUpdater(cars);
        }
        else if(Opt==2){
            Car[] cars = currcarlist.toArray(new Car[currcarlist.size()]);
            MergeSort.modelsort(cars);
            sortUpdater(cars);
        }
        else if(Opt==3){
            Car[] cars = currcarlist.toArray(new Car[currcarlist.size()]);
            MergeSort.yearsort(cars);
            sortUpdater(cars);
        }
        else if(Opt==4){
            Car[] cars = currcarlist.toArray(new Car[currcarlist.size()]);
            MergeSort.citympgsort(cars);
            sortUpdater(cars);
        }
        else if(Opt==5){
            Car[] cars = currcarlist.toArray(new Car[currcarlist.size()]);
            MergeSort.highmpgsort(cars);
            sortUpdater(cars);
        }
        else if(Opt==6){
            Car[] cars = currcarlist.toArray(new Car[currcarlist.size()]);
            MergeSort.combmpgsort(cars);
            sortUpdater(cars);
        }
        else if(Opt==7){
            Car[] cars = currcarlist.toArray(new Car[currcarlist.size()]);
            MergeSort.recallsort(cars);
            sortUpdater(cars);
        }
        else{
        JOptionPane.showMessageDialog(this,"An error occured");}
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void sortUpdater(Car[] cars){
        dtm = (DefaultTableModel)tb1.getModel();
        dtm.getDataVector().removeAllElements();
        dtm.fireTableDataChanged();
        for (int i = 0; i < cars.length; i++)
        {
            dtm.addRow( new Object[]{ cars[i].getMake().toUpperCase(), cars[i].getModel().toUpperCase(), cars[i].getYear(), cars[i].getCitympg(), cars[i].getHighmpg(), cars[i].getCombmpg(), cars[i].getCyl(), cars[i].getEngDis(), cars[i].getTrans(), cars[i].getDrive(),cars[i].getID() } );
        }
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
tf1.setText("");
DefaultTableModel model = (DefaultTableModel) tb1.getModel();
model.setRowCount(0);// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    
private void showAll(){
    tb1.setDefaultEditor(Object.class, null);
Car[] cars = parseCar.readFile("final.csv");
    dtm = (DefaultTableModel)tb1.getModel();
    dtm.getDataVector().removeAllElements();
    dtm.fireTableDataChanged();
    currcarlist = new Vector<Car>();
    for (int i = 0; i < cars.length; i++)
    {
        dtm.addRow( new Object[]{ cars[i].getMake().toUpperCase(), cars[i].getModel().toUpperCase(), cars[i].getYear(), cars[i].getCitympg(), cars[i].getHighmpg(), cars[i].getCombmpg(), cars[i].getCyl(), cars[i].getEngDis(), cars[i].getTrans(), cars[i].getDrive(),cars[i].getID() } );
        currcarlist.add(cars[i]);
    }

    if(dtm.getRowCount()==0){
        JOptionPane.showMessageDialog(this,"No values were found");
        tb1.setVisible(false);
}}

    private void sqlOrganize(){
                try{
Class.forName("java.sql.DriverManager");
Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/cs2xb3","root","root");
Statement stmt=(Statement)con.createStatement();
try{
//stmt.executeQuery("select recalls_final.Category,recalls_final.Make,recalls_final.Model,recalls_final.No_Of_Recalls,recalls_final.Vehicles_Affected,fuel.City_MPG,fuel.Highway_MPG from recalls_final,fuel where  recalls_final.Model= fuel.Model and recalls_final.Make=fuel.Make group by fuel.Model and recalls_final.Model;");
//JOptionPane.showMessageDialog(this,"Successful");}
stmt.executeUpdate("create table recalls_final(id int(40),Category varchar(100),Make varchar(100),Model varchar(100),No_Of_Recalls int(100),Vehicles_Affected int(100));");
stmt.executeUpdate("CREATE TABLE final(id int(40),Year int(30),Category varchar(100),Make varchar(100),Model varchar(100),No_Of_Recalls int(100),Vehicles_Affected int(100),City_MPG int(20),Highway_MPG int(20),Combined_MPG int(20),Cylinders int(10),Eng_Displ varchar(10),Transmission varchar(200),Drive varchar(200));");}
catch(SQLException e){
stmt.executeUpdate("drop table recalls_final;");
stmt.executeUpdate("drop table final;");
stmt.executeUpdate("create table recalls_final(id int(40),Category varchar(100),Make varchar(100),Model varchar(100),No_Of_Recalls int(100),Vehicles_Affected int(100));");
stmt.executeUpdate("CREATE TABLE final(id int(40),Year int(30),Category varchar(100),Make varchar(100),Model varchar(100),No_Of_Recalls int(100),Vehicles_Affected int(100),City_MPG int(20),Highway_MPG int(20),Combined_MPG int(20),Cylinders int(10),Eng_Displ varchar(10),Transmission varchar(200),Drive varchar(200));");
}
JOptionPane.showMessageDialog(this,"Please wait");
stmt.executeUpdate("INSERT INTO recalls_final (select id,Category,Make,Model,count(Model),sum(Units_Affected) from recalls group by model);");
//stmt.executeUpdate("INSERT INTO final (select fuel.id,recalls_final.Year,fuel.Category,recalls_final.Make,recalls_final.Model,recalls_final.No_Of_Recalls,recalls_final.Vehicles_Affected,fuel.City_MPG,fuel.Highway_MPG from recalls_final,fuel where fuel.Model like CONCAT(recalls_final.model, '%') group by recalls_final.Model);");
stmt.executeUpdate("INSERT INTO final (select fuel.id,fuel.Year,fuel.Category,recalls_final.Make,recalls_final.Model,recalls_final.No_Of_Recalls,recalls_final.Vehicles_Affected,fuel.City_MPG,fuel.Highway_MPG,fuel.Combined_MPG,fuel.Cylinders,fuel.Eng_Displ,fuel.Transmission,fuel.Drive from recalls_final,fuel where fuel.Model like CONCAT(recalls_final.Model,'%') group by recalls_final.Model,fuel.Year);");
stmt.executeUpdate("Drop table recalls_final;");
JOptionPane.showMessageDialog(this,"Successful");
//stmt.executeUpdate("INSERT INTO temp(select recalls.id,recalls.Category,recalls.Make,recalls.Model,count(recalls.Model),sum(recalls.Units_Affected),safety.OverallRating from recalls,safety where recalls.Model=safety.Model group by recalls.Model);");
//stmt.executeUpdate("Drop table temp_final;");
//String q3="select Category,Make_Name,Model_Name,sum(Units_Affected) as Units_Affected into rec_fltrd from recalls where Model_Name like \"%Sentra%\" group by Model_Name;";
//stmt.executeUpdate(q3);
        }
catch(ClassNotFoundException | SQLException e)
        {JOptionPane.showMessageDialog(null,e.getMessage());}
    }
    
    public static String getWeb(int Year, String Make, String Model){
URL url;
        try {
            // get URL content
                        Make=Make.replaceAll("\\s+","%20");
            Model=Model.replaceAll("\\s+","%20");
            String a="https://one.nhtsa.gov/webapi/api/SafetyRatings/modelyear/"+Year+"/make/"+Make+"/model/"+Model+"?format=csv";
            url = new URL(a);
            URLConnection conn = url.openConnection();
            Scanner scanner = new Scanner(new InputStreamReader(conn.getInputStream()));
            scanner.useDelimiter(",");
String vehid1="";
int vehid=0;
            while (scanner.hasNext())
        {   
            vehid1=scanner.next();           
        }
            vehid1=vehid1.trim();
try{
            vehid=Integer.parseInt(vehid1);}
catch(Exception e1){
}
scanner.close();

        String b="https://webapi.nhtsa.gov/api/SafetyRatings/VehicleId/" + vehid + "?format=csv";
            url = new URL(b);
            URLConnection conn1 = url.openConnection();
            BufferedReader br1 = new BufferedReader(
                               new InputStreamReader(conn1.getInputStream()));

        
            String line1 = "";
            String sn="";
            String vehstar="";
            line1 = br1.readLine();
            while ((line1 = br1.readLine()) != null) {
                  String[] country1 = line1.split(",");
                  	vehstar="Make & Model: "+Make+","+Model;
                    vehstar=vehstar+"\nOverall Safety Rating: "+country1[1]+" (Out of 5)";   
                    vehstar=vehstar+"\n Total Number of Recalls: "+rec;
                    vehstar=vehstar+"\n Total Number of Vehicles Affected By Recall: "+vaff;
                sn=(country1[1]);
            }
                    JOptionPane.showMessageDialog(null,vehstar);
                    if(sn.equals("")){
                    return "Error";
                    }
                    return sn;

 
        } catch (Exception e) {
            String vehstar="";
                    vehstar="Overall Safety Rating: Not Available";  
                    vehstar=vehstar+"\n Total Number of Recalls: "+rec;
                    vehstar=vehstar+"\n Total Number of Vehicles Affected By Recall: "+vaff;
                    JOptionPane.showMessageDialog(null,vehstar);
            e.printStackTrace();
            return "Error";
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB2;
    private javax.swing.JButton jB3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jCb1;
    private javax.swing.JLabel jLb1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tb1;
    private javax.swing.JTextField tf1;
    // End of variables declaration//GEN-END:variables
}
